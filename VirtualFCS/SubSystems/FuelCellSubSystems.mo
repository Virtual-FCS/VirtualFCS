within VirtualFCS.SubSystems;

model FuelCellSubSystems

  replaceable package Cathode_Medium = Modelica.Media.Air.MoistAir;
  replaceable package Anode_Medium = Modelica.Media.IdealGases.SingleGases.H2;
  replaceable package Coolant_Medium = Modelica.Media.Water.ConstantPropertyLiquidWater;

// H2 Subsystem Paramters
  parameter Real m_FC_subsystems(unit = "kg") = subSystemHydrogen.m_system_H2 + subSystemAir.m_system_air + subSystemCooling.m_system_coolant + batterySystem.m_bat_pack;
  parameter Real V_tank_H2(unit="m3") = 0.13 "H2 tank volume";
  parameter Real p_tank_H2(unit="Pa") = 3500000 "H2 tank initial pressure";


  VirtualFCS.SubSystems.Hydrogen.SubSystemHydrogen subSystemHydrogen annotation(
    Placement(visible = true, transformation(origin = {-60, 0}, extent = {{-15, -10}, {15, 10}}, rotation = 0)));
  Modelica.Fluid.Interfaces.FluidPort_a H2_port_a(redeclare package Medium = Anode_Medium) annotation(
    Placement(visible = true, transformation(origin = {-66, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-70, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Fluid.Interfaces.FluidPort_b H2_port_b(redeclare package Medium = Anode_Medium) annotation(
    Placement(visible = true, transformation(origin = {-54, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-90, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput contolInput[2] annotation(
    Placement(visible = true, transformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
  Modelica.Fluid.Interfaces.FluidPort_a air_port_a(redeclare package Medium = Cathode_Medium) annotation(
    Placement(visible = true, transformation(origin = {52, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {70, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Fluid.Interfaces.FluidPort_b air_port_b(redeclare package Medium = Cathode_Medium) annotation(
    Placement(visible = true, transformation(origin = {66, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  VirtualFCS.SubSystems.Air.SubSystemAir subSystemAir annotation(
    Placement(visible = true, transformation(origin = {60, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Fluid.Interfaces.FluidPort_a coolant_port_a(redeclare package Medium = Coolant_Medium) annotation(
    Placement(visible = true, transformation(origin = {-6, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {10, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Fluid.Interfaces.FluidPort_b coolant_port_b(redeclare package Medium = Coolant_Medium) annotation(
    Placement(visible = true, transformation(origin = {6, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-10, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  VirtualFCS.SubSystems.Cooling.SubSystemCooling subSystemCooling annotation(
    Placement(visible = true, transformation(origin = {0, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  inner Modelica.Fluid.System system annotation(
    Placement(visible = true, transformation(origin = {-94, 94}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  VirtualFCS.Electrochemical.Battery.BatterySystem batterySystem(SOC_init = 0.9)  annotation(
    Placement(visible = true, transformation(origin = {0, -70}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
equation
  connect(subSystemHydrogen.port_H2ToStack, H2_port_a) annotation(
    Line(points = {{-66, 12}, {-66, 12}, {-66, 60}, {-66, 60}}, color = {0, 127, 255}));
  connect(H2_port_b, subSystemHydrogen.port_StackToH2) annotation(
    Line(points = {{-54, 60}, {-54, 60}, {-54, 12}, {-54, 12}}));
  connect(subSystemAir.Input, air_port_b) annotation(
    Line(points = {{66, 12}, {66, 12}, {66, 60}, {66, 60}}, color = {0, 127, 255}));
  connect(subSystemAir.Output, air_port_a) annotation(
    Line(points = {{54, 12}, {52, 12}, {52, 60}, {52, 60}}, color = {0, 127, 255}));
  connect(contolInput[1], subSystemHydrogen.control) annotation(
    Line(points = {{-120, 0}, {-80, 0}, {-80, 6}, {-70, 6}, {-70, 6}}, color = {0, 0, 127}));
  connect(contolInput[2], subSystemCooling.controlInterface) annotation(
    Line(points = {{-120, 0}, {-20, 0}, {-20, 6}, {-10, 6}, {-10, 6}}, color = {0, 0, 127}));
  connect(subSystemCooling.pin_p, batterySystem.pin_p) annotation(
    Line(points = {{6, -8}, {4, -8}, {4, -60}, {4, -60}}, color = {0, 0, 255}));
  connect(subSystemCooling.pin_n, batterySystem.pin_n) annotation(
    Line(points = {{-4, -8}, {-4, -8}, {-4, -60}, {-4, -60}}, color = {0, 0, 255}));
  connect(subSystemHydrogen.pin_p, batterySystem.pin_p) annotation(
    Line(points = {{-54, -8}, {-54, -8}, {-54, -30}, {4, -30}, {4, -60}, {4, -60}}, color = {0, 0, 255}));
  connect(subSystemAir.pin_p, batterySystem.pin_p) annotation(
    Line(points = {{66, -8}, {66, -8}, {66, -30}, {4, -30}, {4, -60}, {4, -60}}, color = {0, 0, 255}));
  connect(subSystemHydrogen.pin_n, batterySystem.pin_n) annotation(
    Line(points = {{-62, -8}, {-64, -8}, {-64, -48}, {-4, -48}, {-4, -60}, {-4, -60}}, color = {0, 0, 255}));
  connect(subSystemAir.pin_n, batterySystem.pin_n) annotation(
    Line(points = {{56, -8}, {54, -8}, {54, -48}, {-4, -48}, {-4, -60}, {-4, -60}}, color = {0, 0, 255}));
  connect(coolant_port_a, subSystemCooling.Input) annotation(
    Line(points = {{-6, 60}, {-6, 60}, {-6, 30}, {6, 30}, {6, 12}, {6, 12}}));
  connect(coolant_port_b, subSystemCooling.Output) annotation(
    Line(points = {{6, 60}, {6, 60}, {6, 32}, {0, 32}, {0, 20}, {-6, 20}, {-6, 12}, {-6, 12}}));
  annotation(
    Icon(graphics = {Text(origin = {-31, -100}, lineColor = {0, 0, 255}, extent = {{-105, 8}, {167, -40}}, textString = "%name"), Rectangle(extent = {{-100, 100}, {100, -100}}), Bitmap(origin = {-1, 1}, extent = {{-99, 99}, {101, -101}}, imageSource = ""), Text(origin = {-82, 60}, lineColor = {255, 255, 255}, extent = {{-22, 10}, {22, -10}}, textString = "H2"), Text(origin = {-2, 60}, lineColor = {255, 255, 255}, extent = {{-22, 10}, {22, -10}}, textString = "Cool"), Text(origin = {80, 60}, lineColor = {255, 255, 255}, extent = {{-22, 10}, {22, -10}}, textString = "Air")}, coordinateSystem(initialScale = 0.1)));
end FuelCellSubSystems;
